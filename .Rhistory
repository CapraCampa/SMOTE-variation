trainset =  names(trainsets)[l],
version = version,
f1 = f1_values
)
plot_data <- rbind(plot_data, temp_df)
}
}
# Convert trainset to a factor with the specified levels
plot_data$trainset <- factor(plot_data$trainset, levels = levels)
# Create the plot
f1_dt <- ggplot(plot_data, aes(x = factor(version), y = f1, fill = factor(version))) +
geom_boxplot() +
facet_wrap(~ trainset, ncol = 3) +
scale_fill_manual(
values = c("#1b9e77", "#d95f02", "#7570b3"),
labels = c("Unbalanced data", "SMOTE", "Dirichlet SMOTE")
) +
labs(
title = "F1 of tree model",
x = "",
y = "F1",
fill = "Model Version"
) +
theme_minimal() +
theme(
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
plot_data <- data.frame(
trainset = integer(),
version = integer(),
f1 = numeric()
)
for (l in 1:9) {
for (version in 1:3) {
f1_values <- results[[l]]$logistic_regressor[[version]]$f1
temp_df <- data.frame(
trainset =  names(trainsets)[l],
version = version,
f1 = f1_values
)
plot_data <- rbind(plot_data, temp_df)
}
}
# Convert trainset to a factor with the specified levels
plot_data$trainset <- factor(plot_data$trainset, levels = levels)
# Create the plot
f1_logistic <- ggplot(plot_data, aes(x = factor(version), y = f1, fill = factor(version))) +
geom_boxplot() +
facet_wrap(~ trainset, ncol = 3) +
scale_fill_manual(
values = c("#1b9e77", "#d95f02", "#7570b3"),
labels = c("Unbalanced data", "SMOTE", "Dirichlet SMOTE")
) +
labs(
title = "F1 of logit model",
x = "",
y = "F1",
fill = "Model Version"
) +
theme_minimal() +
theme(
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#--------------------------------------------------------------------------------
plot_data <- data.frame(
trainset = integer(),
version = integer(),
acc = numeric()
)
for (l in 1:9) {
for (version in 1:3) {
acc_values <- results[[l]]$decision_tree[[version]]$balanced_acc
temp_df <- data.frame(
trainset =  names(trainsets)[l],
version = version,
acc = acc_values
)
plot_data <- rbind(plot_data, temp_df)
}
}
# Convert trainset to a factor with the specified levels
plot_data$trainset <- factor(plot_data$trainset, levels = levels)
# Create the plot
acc_dt <- ggplot(plot_data, aes(x = factor(version), y = acc, fill = factor(version))) +
geom_boxplot() +
facet_wrap(~ trainset, ncol = 3) +
scale_fill_manual(
values = c("#1b9e77", "#d95f02", "#7570b3"),
labels = c("Unbalanced data", "SMOTE", "Dirichlet SMOTE")
) +
labs(
title = "Balanced accuracy of tree model",
x = "",
y = "Balanced accuracy",
fill = "Model Version"
) +
theme_minimal() +
theme(
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
plot_data <- data.frame(
trainset = integer(),
version = integer(),
acc = numeric()
)
for (l in 1:9) {
for (version in 1:3) {
acc_values <- results[[l]]$logistic_regressor[[version]]$balanced_acc
temp_df <- data.frame(
trainset =  names(trainsets)[l],
version = version,
acc = acc_values
)
plot_data <- rbind(plot_data, temp_df)
}
}
# Convert trainset to a factor with the specified levels
plot_data$trainset <- factor(plot_data$trainset, levels = levels)
# Create the plot
acc_logistic <- ggplot(plot_data, aes(x = factor(version), y = acc, fill = factor(version))) +
geom_boxplot() +
facet_wrap(~ trainset, ncol = 3) +
scale_fill_manual(
values = c("#1b9e77", "#d95f02", "#7570b3"),
labels = c("Unbalanced data", "SMOTE", "Dirichlet SMOTE")
) +
labs(
title = "Balanced accuracy of logit model",
x = "",
y = "Balanced accuracy",
fill = "Model Version"
) +
theme_minimal() +
theme(
strip.text = element_text(size = 10, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# plotting metrics----------------------------------------------------------------
#combined_metrics <- acc_dt + acc_logistic + f1_dt + f1_logistic + plot_layout(ncol = 2)
#print(combined_metrics)
pdf("Tree_f1_optimized_threshold.pdf")
plot((f1_dt))
dev.off()
pdf("Tree_balanced_accuracy_optimized_threshold.pdf")
plot((acc_dt))
dev.off()
pdf("Logit_f1_optimized_threshold.pdf")
plot((f1_logistic))
dev.off()
pdf("Logit_balanced_accuracy_optimized_threshold.pdf")
plot((acc_logistic))
dev.off()
}
# median_results <- vector("list", 9)
#
# for (l in 1:9) {
#   median_results[[l]] <- list(
#     logistic_regressor = vector("list", 3),
#     decision_tree = vector("list", 3)
#   )
#
#   # Loop through each model type and each version
#   for (model_type in c("logistic_regressor", "decision_tree")) {
#     for (version in 1:3) {
#       # Extract metrics
#       auc_values <- results[[l]][[model_type]][[version]]$auc
#       balanced_acc_values <- results[[l]][[model_type]][[version]]$balanced_acc
#       f1_values <- results[[l]][[model_type]][[version]]$f1
#
#       # Compute medians
#       median_results[[l]][[model_type]][[version]] <- list(
#         auc_median = median(auc_values, na.rm = TRUE),
#         balanced_acc_median = median(balanced_acc_values, na.rm = TRUE),
#         f1_median = median(f1_values, na.rm = TRUE)
#       )
#     }
#   }
# }
#
# # View the median results
# median_results
trainset_name
print(p)
pdf("data.pdf")
print(p)
dev.off()
pdf("smote.pdf")
print(p1)
dev.off()
print(p2)
pdf("dirichlet.pdf")
print(p2)
dev.off()
pdf("combined.pdf")
print(combined_plot)
dev.off()
print(combined_plot)
# Combine the two plots side-by-side
combined_plot <- p1 + p2 +
plot_layout(ncol = 2) # Arrange plots in a single row
print(combined_plot)
pdf("combined.pdf")
print(combined_plot)
dev.off()
# Plot 1: Dati effettivi
p_actual <- ggplot(testset, aes(x = X1, y = X2, color = factor(y))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Dati Effettivi",
color = "Classe") +
theme_minimal()
# Crea dataframe con le previsioni
pred_df <- data.frame(
X1 = testset$X1,
X2 = testset$X2,
Original = pred.fit.class,
SMOTE = pred.fit.smote.class,
Dirichlet = pred.fit.smote.dirichlet.class
) %>%
pivot_longer(cols = -c(X1, X2),
names_to = "Modello",
values_to = "Predizione")
# Plot 2: Previsioni dei modelli
p_predicted <- ggplot(pred_df, aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
facet_wrap(~ Modello, nrow = 1) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni dei Modelli GLM",
color = "Classe Predetta") +
theme_minimal()
# Combina i due plot
combined_plot <- p_actual / p_predicted
print(combined_plot)
pred_df <- data.frame(
X1 = testset$X1,
X2 = testset$X2,
Original = pred.tree.class,
SMOTE = pred.tree.smote.class,
Dirichlet = pred.tree.smote.dirichlet.class
) %>%
pivot_longer(cols = -c(X1, X2),
names_to = "Modello",
values_to = "Predizione")
# Plot 1: Dati effettivi
p_actual <- ggplot(testset, aes(x = X1, y = X2, color = factor(y))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Dati Effettivi",
color = "Classe") +
theme_minimal()
# Plot 2: Previsioni Modello Originale
p_original <- ggplot(pred_df %>% filter(Modello == "Original"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Originale",
color = "Classe Predetta") +
theme_minimal()
# Plot 3: Previsioni Modello SMOTE
p_smote <- ggplot(pred_df %>% filter(Modello == "SMOTE"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello SMOTE",
color = "Classe Predetta") +
theme_minimal()
# Plot 4: Previsioni Modello Dirichlet
p_dirichlet <- ggplot(pred_df %>% filter(Modello == "Dirichlet"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Dirichlet",
color = "Classe Predetta") +
theme_minimal()
print(p_actual + p_original / p_smote + p_dirichlet)
print((p_actual + p_original) / (p_smote + p_dirichlet))
pred_df
pred_df <- data.frame(
X1 = testset$X1,
X2 = testset$X2,
Original = pred.tree.class,
SMOTE = pred.tree.smote.class,
Dirichlet = pred.tree.smote.dirichlet.class
) %>%
pivot_longer(cols = -c(X1, X2),
names_to = "Modello",
values_to = "Predizione")
# Plot 1: Dati effettivi
p_actual <- ggplot(testset, aes(x = X1, y = X2, color = factor(y))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Dati Effettivi",
color = "Classe") +
theme_minimal()
# Plot 2: Previsioni Modello Originale
p_original <- ggplot(pred_df %>% filter(Modello == "Original"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Originale",
color = "Classe Predetta") +
theme_minimal()
# Plot 3: Previsioni Modello SMOTE
p_smote <- ggplot(pred_df %>% filter(Modello == "SMOTE"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello SMOTE",
color = "Classe Predetta") +
theme_minimal()
# Plot 4: Previsioni Modello Dirichlet
p_dirichlet <- ggplot(pred_df %>% filter(Modello == "Dirichlet"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Dirichlet",
color = "Classe Predetta") +
theme_minimal()
print((p_actual + p_original) / (p_smote + p_dirichlet))
test_index <- ceiling((i/3))
testset <- testsets[[test_index]]
testset$y <- factor(testset$y, levels = c(0, 1))
p_test <- ggplot(testset, aes(x = X1, y = X2, color = factor(y))) +
geom_point(aes(size = factor(y)), alpha = 0.8, show.legend = c(color = TRUE, size = FALSE)) +
scale_color_manual(values = c("grey", "blue")) +
scale_size_manual(values = c(1, 2)) +
labs(title = "SMOTE", x = "Feature 1", y = "Feature 2", color = "Class") +
theme_minimal()
print(p_test)
# Crea dataframe con le previsioni
pred_df <- data.frame(
X1 = testset$X1,
X2 = testset$X2,
Original = pred.tree.class,
SMOTE = pred.tree.smote.class,
Dirichlet = pred.tree.smote.dirichlet.class
) %>%
pivot_longer(cols = -c(X1, X2),
names_to = "Modello",
values_to = "Predizione")
# Plot 2: Previsioni Modello Originale
p_original <- ggplot(pred_df %>% filter(Modello == "Original"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Originale",
color = "Classe Predetta") +
theme_minimal()
# Plot 3: Previsioni Modello SMOTE
p_smote <- ggplot(pred_df %>% filter(Modello == "SMOTE"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello SMOTE",
color = "Classe Predetta") +
theme_minimal()
# Plot 4: Previsioni Modello Dirichlet
p_dirichlet <- ggplot(pred_df %>% filter(Modello == "Dirichlet"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Dirichlet",
color = "Classe Predetta") +
theme_minimal()
print((p_test + p_original) / (p_smote + p_dirichlet))
# Classification trees
metrics.tree <- accuracy.meas(response = testset$y, predicted = pred.tree[,2], threshold = threshold)
metrics.tree.smote <- accuracy.meas(response = testset$y, predicted = pred.tree.smote[,2], threshold = threshold.fit.smote)
metrics.tree.smote.dirichlet <- accuracy.meas(response = testset$y, predicted = pred.tree.smote.dirichlet[,2], threshold = threshold.fit.smote.dirichlet)
metrics.tree
pred_df <- data.frame(
X1 = testset$X1,
X2 = testset$X2,
Original = pred.fit.class,
SMOTE = pred.fit.smote.class,
Dirichlet = pred.fit.smote.dirichlet.class
) %>%
pivot_longer(cols = -c(X1, X2),
names_to = "Modello",
values_to = "Predizione")
# Plot 2: Previsioni Modello Originale
p_original <- ggplot(pred_df %>% filter(Modello == "Original"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Originale",
color = "Classe Predetta") +
theme_minimal()
# Plot 3: Previsioni Modello SMOTE
p_smote <- ggplot(pred_df %>% filter(Modello == "SMOTE"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello SMOTE",
color = "Classe Predetta") +
theme_minimal()
# Plot 4: Previsioni Modello Dirichlet
p_dirichlet <- ggplot(pred_df %>% filter(Modello == "Dirichlet"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Previsioni Modello Dirichlet",
color = "Classe Predetta") +
theme_minimal()
print((p_test + p_original) / (p_smote + p_dirichlet))
pred_df <- data.frame(
X1 = testset$X1,
X2 = testset$X2,
Original = pred.fit.class,
SMOTE = pred.fit.smote.class,
Dirichlet = pred.fit.smote.dirichlet.class
) %>%
pivot_longer(cols = -c(X1, X2),
names_to = "Modello",
values_to = "Predizione")
# Plot 2: Previsioni Modello Originale
p_original <- ggplot(pred_df %>% filter(Modello == "Original"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Predictions of model trained on unbalanced data",
color = "Classe Predetta") +
theme_minimal()
# Plot 3: Previsioni Modello SMOTE
p_smote <- ggplot(pred_df %>% filter(Modello == "SMOTE"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Predictions of model trained on SMOTE data",
color = "Classe Predetta") +
theme_minimal()
# Plot 4: Previsioni Modello Dirichlet
p_dirichlet <- ggplot(pred_df %>% filter(Modello == "Dirichlet"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Classe 0", "Classe 1")) +
labs(title = "Predictions of model trained on SMOTE DIRICHLET data",
color = "Classe Predetta") +
theme_minimal()
print((p_test + p_original) / (p_smote + p_dirichlet))
p_test <- ggplot(testset, aes(x = X1, y = X2, color = factor(y))) +
geom_point(aes(size = factor(y)), alpha = 0.8, show.legend = c(color = TRUE, size = FALSE)) +
scale_color_manual(values = c("grey", "blue")) +
scale_size_manual(values = c(1, 2)) +
labs(title = "Test data", x = "Feature 1", y = "Feature 2", color = "Class") +
theme_minimal()
pred_df <- data.frame(
X1 = testset$X1,
X2 = testset$X2,
Original = pred.fit.class,
SMOTE = pred.fit.smote.class,
Dirichlet = pred.fit.smote.dirichlet.class
) %>%
pivot_longer(cols = -c(X1, X2),
names_to = "Modello",
values_to = "Predizione")
# Plot 2: Previsioni Modello Originale
p_original <- ggplot(pred_df %>% filter(Modello == "Original"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Class 0", "Class 1")) +
labs(title = "Model trained on unbalanced data",
color = "Predicted class") +
theme_minimal()
# Plot 3: Previsioni Modello SMOTE
p_smote <- ggplot(pred_df %>% filter(Modello == "SMOTE"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Class 0", "Class 1")) +
labs(title = "Model trained on SMOTE data",
color = "Predicted class") +
theme_minimal()
# Plot 4: Previsioni Modello Dirichlet
p_dirichlet <- ggplot(pred_df %>% filter(Modello == "Dirichlet"),
aes(x = X1, y = X2, color = factor(Predizione))) +
geom_point(alpha = 0.6) +
scale_color_manual(values = c("grey", "blue"),
labels = c("Class 0", "Class 1")) +
labs(title = "Model trained on SMOTE DIRICHLET data",
color = "Predicted class") +
theme_minimal()
print((p_test + p_original) / (p_smote + p_dirichlet))
pdf("compare_predictions_1.pdf")
print((p_test) / (p_smote))
dev.off()
pdf("compare_predictions_2.pdf")
print((p_original) / (p_dirichlet))
dev.off()
